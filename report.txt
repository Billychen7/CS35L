William Chen
405-131-881

Lab 5

1. Write the tr2b.c and tr2u.c programs and then compile them.

2. command used: dd if=/dev/urandom of=input.txt bs=1M count=5
This command was used to create a large file that we could use for testing. 

3. command used: strace -cf ./tr2b 'a\n-' 'z@m+' < input.txt > tr2boutput.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 78.33    0.000535           1       640           write
 21.67    0.000148           0       642           read
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         4           fstat
  0.00    0.000000           0         9           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000683                  1308         1 total

This command printed the above output which measures the system calles made by tr2b and copies one file to another. 
There were 1308 system calls.

4. command used: strace -cf ./tr2u 'a\n-' 'z@m+' < input.txt > tr2uoutput.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.87   25.223841           5   5242880           write
 45.10   20.733486           4   5242882           read
  0.02    0.010780           4      2486           brk
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         7           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   45.968107              10488269         1 total

This command printed out the above output whcih measures the system calls made by tr2u when copying one file to another.

5. command used: strace -cf ./tr2b 'a\n-' 'z@m+' < input.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 97.69    0.134837           6     20842           write
  2.13    0.002946           5       642           read
  0.06    0.000084           9         9           mmap
  0.05    0.000071          18         4           mprotect
  0.02    0.000029           7         4           fstat
  0.02    0.000024          24         1           munmap
  0.01    0.000016           8         2           open
  0.01    0.000015           8         2           close
  0.01    0.000007           7         1           arch_prctl
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.138029                 21510         1 total
This command printed the output above which measures the system calls made by tr2b when copying a file to my terminal.

6. command used: strace -cf ./tr2u 'a\n-' 'z@m+' < input.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 55.50   31.246983           6   5242880           write
 44.48   25.044338           5   5242882           read
  0.02    0.013213           5      2486           brk
  0.00    0.000043          11         4           mprotect
  0.00    0.000023          23         1           munmap
  0.00    0.000021           3         7           mmap
  0.00    0.000007           7         1           arch_prctl
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00   56.304628              10488269         1 total
This command printed the output above and measures the system calls made by tr2u when copying a file to my terminal.

tr2u makes many more calls than tr2b.

7. command used: time ./tr2b 'a\n-' 'z@m+' < input.txt > tr2boutput2.txt
This command measured the speed of tr2b when copying one file to another.
real	0m0.901s
user	0m0.837s
sys	0m0.020s

8. command used: time ./tr2u 'a\n-' 'z@m+' < input.txt > tr2uoutput2.txt 
This command measured the speed of tr2u when copying one file to another. 
real	0m13.363s
user	0m3.763s
sys	0m9.556s

9. command used: time ./tr2b 'a\n-' 'z@m+' < input.txt
This command measured the speed of tr2b when coping a file to my terminal.
real	0m1.256s
user	0m0.962s
sys	0m0.178s

10. command used: time ./tr2u 'a\n-' 'z@m+' < input.txt
This command measured the speed of tr2u when copying a file to my terminal.
real	0m25.396s
user	0m7.745s
sys	0m17.605s

From the times, we can determine that tr2u is much slower than tr2b because it has so many more system calls. 
Therefore, unbuffered I/O is definitely much slower than buffered I/O. 

END OF LAB

1. We will be testing sfrobu and sfrob with 0, 100, 10,000, and 1,000,000 lines
Using the frobwords.py given by Robert royce Ristine, we developed input files with these many lines. 
These input files were stored as test1, test2, test3, and test4 respectively.
We use time and strace to determine the number of comparisons and time
2. time ./sfrob <test1.txt
real	0m0.004s
user	0m0.002s
sys	0m0.002s
Comparisons: 0

3. time ./sfrob <test2.txt
real	0m0.005s
user	0m0.001s
sys	0m0.003s
Comparisons: 3669

4. time ./sfrob <test3.txt 
real	0m0.166s
user	0m0.127s
sys	0m0.031s
Comparisons: 664335

5. time ./sfrob <test4.txt
real	0m12.935s
user	0m9.000s
sys	0m3.144s
Comparisons: 96283980

6. time ./sfrobu <test1.txt
real	0m0.004s
user	0m0.000s
sys	0m0.003s
Comparisons: 0

7. time ./sfrobu <test2.txt
real	0m0.006s
user	0m0.001s
sys	0m0.004s
Comparisons:3669

8. time ./sfrobu <test3.txt
real	0m4.518s
user	0m4.352s
sys	0m0.157s
Comparisons: 664335

9. time ./sfrobu <test4.txt
real: 0m40.322s
user: 0m10.556s
sys:  0m29.945s
Comparisons: 96283980

10. Using a graphing calculator, we calculated the following trendlines using y as the real time and x as the number of input lines
sfrob: y=1.29E-05*x 
sfrobu: y = 3.9E-05*x + 1.37

On average, sfrobu takes significantly more time, as we had guessed from making tr2b and tr2u.

11. If we were to use system calls for memory allocation functions, we would use the following functions:
strace -c ./sfrobu < [file_name]
strace -c cat [file_name] | ./sfrobu > file1.txt
By running these functions, I believe that brk is the system calls from dynamic memory management. 
When we are calling malloc or realloc, the argument is greater than the current location of the current program break. When calling free, the argument is less. 

