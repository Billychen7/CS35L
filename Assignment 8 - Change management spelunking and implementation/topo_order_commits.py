#!/usr/bin/python3

# Vincent Kim
# 704913595


import os
import sys
import zlib

def topo_order_commits():
    top_level = discoverDir(os.getcwd())
    branch_names = getList(top_level)
    graph = buildGraph(branch_names)
    generatePrint(graph, branch_names)

def discoverDir(currDir):
    # 1. Discover the .git directory
    while os.path.isdir('.git') == False:
        if currDir == '/':
            sys.stderr.write("Not inside a Git repository")
            exit(1)
        os.chdir('..')
        currDir = os.getcwd()

    os.chdir('.git')
    path = os.getcwd()
    return path

def getList(path):
    # 2. Get the list of local branch names
    branchDir = path + "/refs/heads/"
    branch = dict()

    for root, dirs, files in os.walk(branchDir):
        for file in files:
            commit = open(branchDir + str(file), 'rb').read().decode()[0:-1]
            branch[file] = commit
    
    return branch

def buildGraph(branch):
    # 3. Build the commit graph
    objects = dict()
    for key in branch:
        commit = branch[key]
        stack = []
        if commit not in objects:
            node = CommitNode(commit)
            objects[commit] = node
        stack.append(commit)

        while len(stack) != 0:
            top = stack[len(stack)-1]
            stack.pop()
            path = os.getcwd() + str('/objects/') + top[0:2]
            path += '/' + top[2:len(top)]
            content = zlib.decompress(open(path, 'rb').read()).decode().split('\n')
            parents = []
            for i in range(1, len(content)):
                line = content[i].split()
                if line[0] == 'parent':
                    parents.append(line[1])
                else:
                    break
            for parent in parents:
                if parent not in objects:
                    parentNode = CommitNode(parent)
                    parentNode.children.add(top)
                    objects[top].parents.add(parent)
                    stack.append(parent)
                    objects[parent] = parentNode
                else:
                    objects[parent].children.add(top)
                    objects[top].parents.add(parent)

    return objects

def generatePrint(objects, branch):
    # 4. Generate a topological ordering of the commits in the graph
    sortedList = []
    queue = []
    for key in objects:
        objects[key].indegree = len(objects[key].children)
        if objects[key].indegree == 0:
            queue.append(key)
    while len(queue) != 0:
        rm = queue.pop(0)
        sortedList.append(rm)
        for parent in objects[rm].parents:
            objects[parent].indegree -= 1
            if objects[parent].indegree == 0:
                queue.append(parent)
            
    # 5. Print the commit hashes in the order generated by step 4, from the smallest to the largest
    stickyEnd = False
    for i in range(0, len(sortedList)):
        results = ""
        item = sortedList[i]

        childrenList = []
        if stickyEnd == True:
            results += "="
            for child in sorted(objects[item].children):
                childrenList.append(child)
        for i in range(0, len(childrenList)-1):
            results += childrenList[i] + " "
        if len(childrenList) != 0:
            results += childrenList[-1]
        if stickyEnd == True:
            results += "\n"

        results += item
        for key in branch:
            if branch[key] == item:
                results += " " + key
        if i == len(sortedList)-1:
            print(results)
            break

        parentList = []
        next = sortedList[i+1]
        if next not in objects[item].parents:
            results += "\n"
            for parent in sorted(objects[item].parents):
                parentList.append(parent)
            stickyEnd = True
        else:
            stickyEnd = False

        for i in range(0, len(parentList)-1):
            results += parentList[i] + " "
        if len(parentList) != 0:
            results += parentList[-1] + "=\n"

        print(results)

# 3. Part of Build the commit graph
class CommitNode:
    def __init__(self, commit_hash):
        """
        :type commit_hash: str
        """
        self.commit_hash = commit_hash
        self.parents = set()
        self.children = set()
        self.indegree = 0


# Main
if __name__ == '__main__':
    topo_order_commits()
